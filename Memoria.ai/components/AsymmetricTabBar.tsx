import React from 'react';\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  StyleSheet,\n  Dimensions,\n  Platform,\n  Animated\n} from 'react-native';\nimport { BottomTabBarProps } from '@react-navigation/bottom-tabs';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport * as Haptics from 'expo-haptics';\nimport { IconSymbol } from '@/components/ui/IconSymbol';\nimport { Colors } from '@/constants/Colors';\nimport { useColorScheme } from '@/hooks/useColorScheme';\nimport { RootTabParamList } from '@/types/navigation';\n\ninterface AsymmetricTabBarProps extends BottomTabBarProps {\n  onRecordPress: () => void;\n  isRecording?: boolean;\n}\n\nexport function AsymmetricTabBar({\n  state,\n  descriptors,\n  navigation,\n  onRecordPress,\n  isRecording = false\n}: AsymmetricTabBarProps) {\n  const colorScheme = useColorScheme();\n  const insets = useSafeAreaInsets();\n  const colors = Colors[colorScheme ?? 'light'];\n  \n  const { width: screenWidth } = Dimensions.get('window');\n  \n  // Asymmetric tab configuration: 40% - 20% - 40%\n  const homeTabWidth = screenWidth * 0.4;\n  const fabWidth = screenWidth * 0.2;\n  const myLifeTabWidth = screenWidth * 0.4;\n\n  const handleTabPress = async (route: any, isFocused: boolean) => {\n    await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n    \n    const event = navigation.emit({\n      type: 'tabPress',\n      target: route.key,\n      canPreventDefault: true,\n    });\n\n    if (!isFocused && !event.defaultPrevented) {\n      navigation.navigate(route.name);\n    }\n  };\n\n  const handleRecordPress = async () => {\n    await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n    onRecordPress();\n  };\n\n  // Filter visible routes (exclude hidden tabs)\n  const visibleRoutes = state.routes.filter((route, index) => {\n    const { options } = descriptors[route.key];\n    return options.href !== null; // Only show tabs that aren't hidden\n  });\n\n  return (\n    <View style={[styles.container, { paddingBottom: insets.bottom }]}>\n      {/* Tab Bar Background */}\n      <View style={[styles.tabBar, { backgroundColor: colors.tabBarBackground }]}>\n        \n        {/* Home Tab (40% width) */}\n        {visibleRoutes[0] && (\n          <TouchableOpacity\n            style={[\n              styles.tab,\n              { width: homeTabWidth },\n              state.index === 0 && styles.activeTab\n            ]}\n            onPress={() => handleTabPress(visibleRoutes[0], state.index === 0)}\n            accessibilityRole=\"tab\"\n            accessibilityLabel={descriptors[visibleRoutes[0].key].options.tabBarAccessibilityLabel}\n            testID={descriptors[visibleRoutes[0].key].options.tabBarTestID}\n          >\n            <View style={styles.tabContent}>\n              {descriptors[visibleRoutes[0].key].options.tabBarIcon?.({\n                color: state.index === 0 ? colors.elderlyTabActive : colors.elderlyTabInactive,\n                focused: state.index === 0,\n                size: state.index === 0 ? 36 : 32\n              })}\n              <Text\n                style={[\n                  styles.tabLabel,\n                  {\n                    color: state.index === 0 ? colors.elderlyTabActive : colors.elderlyTabInactive,\n                    fontWeight: state.index === 0 ? '700' : '600'\n                  }\n                ]}\n              >\n                {descriptors[visibleRoutes[0].key].options.title}\n              </Text>\n            </View>\n          </TouchableOpacity>\n        )}\n\n        {/* Center Space for FAB (20% width) */}\n        <View style={[styles.fabSpace, { width: fabWidth }]} />\n\n        {/* My Life Tab (40% width) */}\n        {visibleRoutes[1] && (\n          <TouchableOpacity\n            style={[\n              styles.tab,\n              { width: myLifeTabWidth },\n              state.index === 1 && styles.activeTab\n            ]}\n            onPress={() => handleTabPress(visibleRoutes[1], state.index === 1)}\n            accessibilityRole=\"tab\"\n            accessibilityLabel={descriptors[visibleRoutes[1].key].options.tabBarAccessibilityLabel}\n            testID={descriptors[visibleRoutes[1].key].options.tabBarTestID}\n          >\n            <View style={styles.tabContent}>\n              {descriptors[visibleRoutes[1].key].options.tabBarIcon?.({\n                color: state.index === 1 ? colors.elderlyTabActive : colors.elderlyTabInactive,\n                focused: state.index === 1,\n                size: state.index === 1 ? 36 : 32\n              })}\n              <Text\n                style={[\n                  styles.tabLabel,\n                  {\n                    color: state.index === 1 ? colors.elderlyTabActive : colors.elderlyTabInactive,\n                    fontWeight: state.index === 1 ? '700' : '600'\n                  }\n                ]}\n              >\n                {descriptors[visibleRoutes[1].key].options.title}\n              </Text>\n            </View>\n          </TouchableOpacity>\n        )}\n      </View>\n\n      {/* Floating Action Button (overlays the center space) */}\n      <View style={styles.fabContainer}>\n        <TouchableOpacity\n          style={[\n            styles.fab,\n            isRecording && styles.fabRecording,\n            {\n              backgroundColor: isRecording ? colors.elderlyError : colors.elderlyTabActive,\n              shadowColor: isRecording ? colors.elderlyError : colors.elderlyTabActive\n            }\n          ]}\n          onPress={handleRecordPress}\n          accessibilityRole=\"button\"\n          accessibilityLabel={isRecording ? 'Stop recording' : 'Start recording a new memory'}\n          testID=\"fab-record-button\"\n        >\n          <Animated.View style={styles.fabIcon}>\n            <IconSymbol\n              name={isRecording ? 'stop.circle.fill' : 'mic.fill'}\n              size={32}\n              color=\"white\"\n            />\n          </Animated.View>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    zIndex: 1000,\n  },\n  tabBar: {\n    flexDirection: 'row',\n    height: Platform.select({\n      ios: 88,\n      default: 80,\n    }),\n    paddingTop: 8,\n    paddingBottom: Platform.select({\n      ios: 20,\n      default: 16,\n    }),\n    elevation: 10,\n    shadowOffset: {\n      width: 0,\n      height: -2,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 8,\n    borderTopWidth: 0,\n  },\n  tab: {\n    flex: 0, // Don't use flex, use explicit width\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingHorizontal: 8,\n    minHeight: 60,\n  },\n  activeTab: {\n    // Visual indicator for active tab\n  },\n  tabContent: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 4,\n  },\n  tabLabel: {\n    fontSize: 14,\n    fontWeight: '600',\n    marginTop: 4,\n    textAlign: 'center',\n  },\n  fabSpace: {\n    // Empty space for the floating button\n  },\n  fabContainer: {\n    position: 'absolute',\n    top: -35, // Half the FAB height to create overlap\n    left: '50%',\n    marginLeft: -35, // Half the FAB width to center it\n    zIndex: 1001,\n  },\n  fab: {\n    width: 70,\n    height: 70,\n    borderRadius: 35,\n    alignItems: 'center',\n    justifyContent: 'center',\n    elevation: 8,\n    shadowOffset: {\n      width: 0,\n      height: 4,\n    },\n    shadowOpacity: 0.3,\n    shadowRadius: 6,\n    // Add border for better visibility\n    borderWidth: 3,\n    borderColor: 'white',\n  },\n  fabRecording: {\n    // Different styling when recording\n    transform: [{ scale: 1.05 }],\n  },\n  fabIcon: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});"