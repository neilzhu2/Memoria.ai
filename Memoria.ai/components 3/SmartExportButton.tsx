import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  StyleSheet,\n  ActivityIndicator,\n  Modal,\n  ScrollView,\n  Alert\n} from 'react-native';\nimport * as Haptics from 'expo-haptics';\nimport { Colors } from '@/constants/Colors';\nimport { useColorScheme } from '@/hooks/useColorScheme';\nimport { SmartExportConfig } from '@/types/memory';\nimport { IconSymbol } from '@/components/ui/IconSymbol';\n\ninterface SmartExportButtonProps {\n  memoryCount: number;\n  isGenerating: boolean;\n  onExport: (config: SmartExportConfig) => Promise<void>;\n  showAdvanced?: boolean;\n  onToggleAdvanced?: () => void;\n}\n\nexport function SmartExportButton({\n  memoryCount,\n  isGenerating,\n  onExport,\n  showAdvanced = false,\n  onToggleAdvanced\n}: SmartExportButtonProps) {\n  const colorScheme = useColorScheme();\n  const colors = Colors[colorScheme ?? 'light'];\n  const [showExportModal, setShowExportModal] = useState(false);\n  const [exportConfig, setExportConfig] = useState<SmartExportConfig>({\n    type: 'full',\n    includeAudio: true,\n    includeTranscriptions: true,\n    format: 'pdf',\n    familySharing: true\n  });\n\n  const handleExportPress = async () => {\n    await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n    \n    if (memoryCount < 3) {\n      Alert.alert(\n        'Not Enough Memories',\n        'You need at least 3 memories to create a memoir. Keep recording!',\n        [{ text: 'OK', style: 'default' }]\n      );\n      return;\n    }\n    \n    setShowExportModal(true);\n  };\n\n  const handleStartExport = async () => {\n    await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy);\n    setShowExportModal(false);\n    \n    try {\n      await onExport(exportConfig);\n      Alert.alert(\n        'Memoir Created!',\n        'Your memoir has been created and is ready to share with your family.',\n        [{ text: 'Great!', style: 'default' }]\n      );\n    } catch (error) {\n      Alert.alert(\n        'Export Failed',\n        'There was a problem creating your memoir. Please try again.',\n        [{ text: 'OK', style: 'default' }]\n      );\n    }\n  };\n\n  const handleCancelExport = async () => {\n    await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n    setShowExportModal(false);\n  };\n\n  const getButtonText = () => {\n    if (memoryCount < 3) {\n      return `Record ${3 - memoryCount} more to create memoir`;\n    }\n    return 'Create My Memoir';\n  };\n\n  const getButtonIcon = () => {\n    if (isGenerating) return 'doc.on.doc';\n    if (memoryCount < 3) return 'lock.fill';\n    return 'square.and.arrow.up.fill';\n  };\n\n  return (\n    <>\n      <TouchableOpacity\n        style={[\n          styles.exportButton,\n          {\n            backgroundColor: memoryCount >= 3 ? colors.elderlySuccess : colors.elderlyLightContrast,\n            opacity: isGenerating ? 0.7 : 1.0\n          }\n        ]}\n        onPress={handleExportPress}\n        disabled={isGenerating}\n        accessibilityLabel={getButtonText()}\n        accessibilityRole=\"button\"\n      >\n        <View style={styles.buttonContent}>\n          {isGenerating ? (\n            <ActivityIndicator size=\"small\" color=\"white\" style={styles.buttonIcon} />\n          ) : (\n            <IconSymbol\n              name={getButtonIcon()}\n              size={20}\n              color=\"white\"\n              style={styles.buttonIcon}\n            />\n          )}\n          <Text style={styles.exportButtonText}>{getButtonText()}</Text>\n        </View>\n        \n        {memoryCount >= 3 && (\n          <Text style={styles.exportSubtext}>\n            {memoryCount} memories ready â€¢ Family-friendly format\n          </Text>\n        )}\n      </TouchableOpacity>\n\n      {/* Export Configuration Modal */}\n      <Modal\n        visible={showExportModal}\n        animationType=\"slide\"\n        presentationStyle=\"pageSheet\"\n      >\n        <View style={[styles.modalContainer, { backgroundColor: colors.background }]}>\n          <View style={styles.modalHeader}>\n            <Text style={[styles.modalTitle, { color: colors.text }]}>\n              Create Your Memoir\n            </Text>\n            <Text style={[styles.modalSubtitle, { color: colors.elderlyLightContrast }]}>\n              Choose what to include in your family memoir\n            </Text>\n          </View>\n\n          <ScrollView style={styles.modalContent} showsVerticalScrollIndicator={false}>\n            {/* Export Type Selection */}\n            <View style={styles.optionSection}>\n              <Text style={[styles.optionTitle, { color: colors.text }]}>Include Memories</Text>\n              \n              <TouchableOpacity\n                style={[\n                  styles.optionButton,\n                  { backgroundColor: colors.tabBarBackground },\n                  exportConfig.type === 'full' && { backgroundColor: colors.elderlyTabActive }\n                ]}\n                onPress={() => setExportConfig(prev => ({ ...prev, type: 'full' }))}\n              >\n                <Text style={[\n                  styles.optionButtonText,\n                  { color: exportConfig.type === 'full' ? 'white' : colors.text }\n                ]}>\n                  All {memoryCount} memories\n                </Text>\n              </TouchableOpacity>\n\n              <TouchableOpacity\n                style={[\n                  styles.optionButton,\n                  { backgroundColor: colors.tabBarBackground },\n                  exportConfig.type === 'recent' && { backgroundColor: colors.elderlyTabActive }\n                ]}\n                onPress={() => setExportConfig(prev => ({ ...prev, type: 'recent' }))}\n              >\n                <Text style={[\n                  styles.optionButtonText,\n                  { color: exportConfig.type === 'recent' ? 'white' : colors.text }\n                ]}>\n                  Recent memories (last 30 days)\n                </Text>\n              </TouchableOpacity>\n            </View>\n\n            {/* Format Selection */}\n            <View style={styles.optionSection}>\n              <Text style={[styles.optionTitle, { color: colors.text }]}>Format</Text>\n              \n              <View style={styles.formatButtons}>\n                {(['pdf', 'docx', 'html'] as const).map((format) => (\n                  <TouchableOpacity\n                    key={format}\n                    style={[\n                      styles.formatButton,\n                      { backgroundColor: colors.tabBarBackground },\n                      exportConfig.format === format && { backgroundColor: colors.elderlyTabActive }\n                    ]}\n                    onPress={() => setExportConfig(prev => ({ ...prev, format }))}\n                  >\n                    <Text style={[\n                      styles.formatButtonText,\n                      { color: exportConfig.format === format ? 'white' : colors.text }\n                    ]}>\n                      {format.toUpperCase()}\n                    </Text>\n                  </TouchableOpacity>\n                ))}\n              </View>\n            </View>\n\n            {/* Advanced Options (Progressive Disclosure) */}\n            {showAdvanced && (\n              <View style={styles.optionSection}>\n                <Text style={[styles.optionTitle, { color: colors.text }]}>Advanced Options</Text>\n                \n                <TouchableOpacity\n                  style={[\n                    styles.checkboxOption,\n                    { backgroundColor: colors.tabBarBackground }\n                  ]}\n                  onPress={() => setExportConfig(prev => ({ ...prev, includeAudio: !prev.includeAudio }))}\n                >\n                  <View style={[\n                    styles.checkbox,\n                    { borderColor: colors.elderlyTabActive },\n                    exportConfig.includeAudio && { backgroundColor: colors.elderlyTabActive }\n                  ]}>\n                    {exportConfig.includeAudio && (\n                      <IconSymbol name=\"checkmark\" size={16} color=\"white\" />\n                    )}\n                  </View>\n                  <Text style={[styles.checkboxText, { color: colors.text }]}>\n                    Include audio recordings\n                  </Text>\n                </TouchableOpacity>\n\n                <TouchableOpacity\n                  style={[\n                    styles.checkboxOption,\n                    { backgroundColor: colors.tabBarBackground }\n                  ]}\n                  onPress={() => setExportConfig(prev => ({ ...prev, includeTranscriptions: !prev.includeTranscriptions }))}\n                >\n                  <View style={[\n                    styles.checkbox,\n                    { borderColor: colors.elderlyTabActive },\n                    exportConfig.includeTranscriptions && { backgroundColor: colors.elderlyTabActive }\n                  ]}>\n                    {exportConfig.includeTranscriptions && (\n                      <IconSymbol name=\"checkmark\" size={16} color=\"white\" />\n                    )}\n                  </View>\n                  <Text style={[styles.checkboxText, { color: colors.text }]}>\n                    Include text transcriptions\n                  </Text>\n                </TouchableOpacity>\n              </View>\n            )}\n\n            {/* Family Sharing */}\n            <View style={styles.optionSection}>\n              <TouchableOpacity\n                style={[\n                  styles.checkboxOption,\n                  { backgroundColor: colors.tabBarBackground }\n                ]}\n                onPress={() => setExportConfig(prev => ({ ...prev, familySharing: !prev.familySharing }))}\n              >\n                <View style={[\n                  styles.checkbox,\n                  { borderColor: colors.elderlyTabActive },\n                  exportConfig.familySharing && { backgroundColor: colors.elderlyTabActive }\n                ]}>\n                  {exportConfig.familySharing && (\n                    <IconSymbol name=\"checkmark\" size={16} color=\"white\" />\n                  )}\n                </View>\n                <Text style={[styles.checkboxText, { color: colors.text }]}>\n                  Share with family automatically\n                </Text>\n              </TouchableOpacity>\n            </View>\n\n            {/* Advanced Toggle */}\n            {onToggleAdvanced && (\n              <TouchableOpacity\n                style={styles.advancedToggle}\n                onPress={onToggleAdvanced}\n              >\n                <Text style={[styles.advancedToggleText, { color: colors.elderlyTabActive }]}>\n                  {showAdvanced ? 'Hide' : 'Show'} Advanced Options\n                </Text>\n              </TouchableOpacity>\n            )}\n          </ScrollView>\n\n          {/* Modal Actions */}\n          <View style={[styles.modalActions, { borderTopColor: colors.elderlyLightContrast }]}>\n            <TouchableOpacity\n              style={[styles.cancelButton, { backgroundColor: colors.tabBarBackground }]}\n              onPress={handleCancelExport}\n            >\n              <Text style={[styles.cancelButtonText, { color: colors.text }]}>Cancel</Text>\n            </TouchableOpacity>\n            \n            <TouchableOpacity\n              style={[styles.createButton, { backgroundColor: colors.elderlySuccess }]}\n              onPress={handleStartExport}\n              disabled={isGenerating}\n            >\n              <Text style={styles.createButtonText}>\n                {isGenerating ? 'Creating...' : 'Create Memoir'}\n              </Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </Modal>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  exportButton: {\n    paddingHorizontal: 24,\n    paddingVertical: 16,\n    borderRadius: 12,\n    alignItems: 'center',\n    elevation: 3,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.15,\n    shadowRadius: 4,\n    minHeight: 80,\n    justifyContent: 'center',\n    minWidth: 280,\n  },\n  buttonContent: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 4,\n  },\n  buttonIcon: {\n    marginRight: 8,\n  },\n  exportButtonText: {\n    fontSize: 18,\n    fontWeight: '700',\n    color: 'white',\n  },\n  exportSubtext: {\n    fontSize: 14,\n    color: 'rgba(255, 255, 255, 0.9)',\n    textAlign: 'center',\n  },\n  modalContainer: {\n    flex: 1,\n  },\n  modalHeader: {\n    padding: 24,\n    paddingTop: 60,\n    alignItems: 'center',\n  },\n  modalTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 8,\n  },\n  modalSubtitle: {\n    fontSize: 16,\n    textAlign: 'center',\n  },\n  modalContent: {\n    flex: 1,\n    paddingHorizontal: 24,\n  },\n  optionSection: {\n    marginBottom: 32,\n  },\n  optionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    marginBottom: 16,\n  },\n  optionButton: {\n    padding: 16,\n    borderRadius: 10,\n    marginBottom: 8,\n    minHeight: 56,\n    justifyContent: 'center',\n  },\n  optionButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n  formatButtons: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    gap: 12,\n  },\n  formatButton: {\n    flex: 1,\n    padding: 12,\n    borderRadius: 8,\n    alignItems: 'center',\n    minHeight: 48,\n    justifyContent: 'center',\n  },\n  formatButtonText: {\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  checkboxOption: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    borderRadius: 10,\n    marginBottom: 8,\n    minHeight: 56,\n  },\n  checkbox: {\n    width: 24,\n    height: 24,\n    borderRadius: 6,\n    borderWidth: 2,\n    marginRight: 12,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  checkboxText: {\n    fontSize: 16,\n    fontWeight: '500',\n    flex: 1,\n  },\n  advancedToggle: {\n    padding: 16,\n    alignItems: 'center',\n  },\n  advancedToggleText: {\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  modalActions: {\n    flexDirection: 'row',\n    padding: 24,\n    paddingBottom: 40,\n    gap: 16,\n    borderTopWidth: 1,\n  },\n  cancelButton: {\n    flex: 1,\n    padding: 16,\n    borderRadius: 10,\n    alignItems: 'center',\n    minHeight: 52,\n    justifyContent: 'center',\n  },\n  cancelButtonText: {\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  createButton: {\n    flex: 2,\n    padding: 16,\n    borderRadius: 10,\n    alignItems: 'center',\n    minHeight: 52,\n    justifyContent: 'center',\n  },\n  createButtonText: {\n    fontSize: 16,\n    fontWeight: '700',\n    color: 'white',\n  },\n});"