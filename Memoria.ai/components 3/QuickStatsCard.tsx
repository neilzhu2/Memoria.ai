import React from 'react';\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  StyleSheet,\n  ViewStyle\n} from 'react-native';\nimport * as Haptics from 'expo-haptics';\nimport { IconSymbol } from '@/components/ui/IconSymbol';\nimport { Colors } from '@/constants/Colors';\nimport { useColorScheme } from '@/hooks/useColorScheme';\n\ninterface QuickStatsCardProps {\n  title: string;\n  value: string;\n  subtitle: string;\n  icon: string;\n  color: string;\n  onPress?: () => void;\n  style?: ViewStyle;\n  testID?: string;\n}\n\nexport function QuickStatsCard({\n  title,\n  value,\n  subtitle,\n  icon,\n  color,\n  onPress,\n  style,\n  testID\n}: QuickStatsCardProps) {\n  const colorScheme = useColorScheme();\n  const colors = Colors[colorScheme ?? 'light'];\n\n  const handlePress = async () => {\n    if (onPress) {\n      await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n      onPress();\n    }\n  };\n\n  const CardComponent = onPress ? TouchableOpacity : View;\n\n  return (\n    <CardComponent\n      style={[\n        styles.card,\n        { backgroundColor: colors.tabBarBackground },\n        style\n      ]}\n      onPress={onPress ? handlePress : undefined}\n      disabled={!onPress}\n      accessibilityRole={onPress ? \"button\" : \"text\"}\n      accessibilityLabel={`${title}: ${value}. ${subtitle}`}\n      testID={testID}\n    >\n      {/* Icon Section */}\n      <View style={[styles.iconContainer, { backgroundColor: color }]}>\n        <IconSymbol\n          name={icon}\n          size={28}\n          color=\"white\"\n        />\n      </View>\n\n      {/* Content Section */}\n      <View style={styles.content}>\n        <Text style={[styles.title, { color: colors.elderlyLightContrast }]}>\n          {title}\n        </Text>\n        <Text style={[styles.value, { color: colors.text }]}>\n          {value}\n        </Text>\n        <Text style={[styles.subtitle, { color: colors.elderlyLightContrast }]} numberOfLines={2}>\n          {subtitle}\n        </Text>\n      </View>\n\n      {/* Interaction Indicator */}\n      {onPress && (\n        <View style={styles.chevronContainer}>\n          <IconSymbol\n            name=\"chevron.right\"\n            size={16}\n            color={colors.elderlyLightContrast}\n          />\n        </View>\n      )}\n    </CardComponent>\n  );\n}\n\n// Specialized variant for memory count with visual emphasis\nexport function MemoryCountCard({\n  memoryCount,\n  memoriesThisWeek,\n  onPress,\n  ...props\n}: {\n  memoryCount: number;\n  memoriesThisWeek: number;\n  onPress?: () => void;\n} & Partial<QuickStatsCardProps>) {\n  const getSubtitle = () => {\n    if (memoryCount === 0) {\n      return \"Ready to start your journey?\";\n    }\n    if (memoriesThisWeek > 0) {\n      return `${memoriesThisWeek} recorded this week`;\n    }\n    return \"Keep the memories coming!\";\n  };\n\n  const getValue = () => {\n    if (memoryCount === 0) return \"Start Here\";\n    return memoryCount.toString();\n  };\n\n  return (\n    <QuickStatsCard\n      title=\"Memories\"\n      value={getValue()}\n      subtitle={getSubtitle()}\n      icon=\"book.fill\"\n      color={memoryCount > 0 ? \"#2E86AB\" : \"#F57F17\"}\n      onPress={onPress}\n      {...props}\n    />\n  );\n}\n\n// Specialized variant for duration with time formatting\nexport function DurationCard({\n  totalDuration,\n  averageDuration,\n  ...props\n}: {\n  totalDuration: number; // in seconds\n  averageDuration: number; // in seconds\n} & Partial<QuickStatsCardProps>) {\n  const formatDuration = (seconds: number): string => {\n    if (seconds < 60) return `${seconds}s`;\n    const minutes = Math.round(seconds / 60);\n    if (minutes < 60) return `${minutes}m`;\n    const hours = Math.round(minutes / 60);\n    return `${hours}h`;\n  };\n\n  const getSubtitle = () => {\n    if (totalDuration === 0) return \"No recordings yet\";\n    return `${formatDuration(averageDuration)} average length`;\n  };\n\n  return (\n    <QuickStatsCard\n      title=\"Total Time\"\n      value={formatDuration(totalDuration)}\n      subtitle={getSubtitle()}\n      icon=\"clock.fill\"\n      color=\"#2E7D32\"\n      {...props}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 16,\n    borderRadius: 12,\n    minHeight: 80,\n    elevation: 2,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n  },\n  iconContainer: {\n    width: 48,\n    height: 48,\n    borderRadius: 12,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginRight: 12,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 12,\n    fontWeight: '500',\n    textTransform: 'uppercase',\n    letterSpacing: 0.5,\n    marginBottom: 2,\n  },\n  value: {\n    fontSize: 22,\n    fontWeight: 'bold',\n    marginBottom: 2,\n  },\n  subtitle: {\n    fontSize: 12,\n    fontWeight: '500',\n    lineHeight: 16,\n  },\n  chevronContainer: {\n    marginLeft: 8,\n    opacity: 0.6,\n  },\n});"