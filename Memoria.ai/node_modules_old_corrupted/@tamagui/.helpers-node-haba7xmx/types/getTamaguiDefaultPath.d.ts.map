{
  "mappings": "AAMA,OAAO,iBAAe,4BAA4B,EAChD,KACA,OAKD,EAJE;CACD;;CAEA;AACD,IAAG",
  "names": [],
  "sources": [
    "src/getTamaguiDefaultPath.ts"
  ],
  "sourcesContent": [
    "import { join } from 'node:path'\n\nimport { pathExists } from 'fs-extra'\n\nlet cachedPath = ''\n\nexport async function getDefaultTamaguiConfigPath({\n  cwd = '.',\n  cache = true,\n}: {\n  cwd?: string\n  // TODO this isn't passed down / could avoid\n  cache?: boolean\n}): Promise<string> {\n  if (cache && cachedPath) {\n    return cachedPath\n  }\n\n  const defaultPaths = ['tamagui.config.ts', join('src', 'tamagui.config.ts')].map((p) =>\n    join(cwd, p)\n  )\n  const existing = (\n    await Promise.all(defaultPaths.map((path) => pathExists(path)))\n  ).findIndex((x) => !!x)\n  const found = defaultPaths[existing]\n  if (!found) {\n    throw new Error(`No found tamagui.config.ts`)\n  }\n\n  cachedPath = found\n  return found\n}\n"
  ],
  "version": 3
}