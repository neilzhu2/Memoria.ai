{
  "mappings": "AAEA,cAAc,sBAAsB,gBAAgB;AAKpD,OAAO,iBAAe,mBAAmB,EAAE,KAA4B,EAAf;CAAE;AAAa,IAAG,QAAQ;CAChF;CACA,SAAS;AACV",
  "names": [],
  "sources": [
    "src/readTamaguiOptions.ts"
  ],
  "sourcesContent": [
    "import { join } from 'node:path'\n\nimport type { TamaguiOptions } from '@tamagui/types'\nimport { pathExists, readJSON } from 'fs-extra'\n\nimport { getDefaultTamaguiOptions } from './getDefaultTamaguiOptions'\n\nexport async function readTamaguiOptions({ cwd = '.' }: { cwd: string }): Promise<{\n  exists: boolean\n  options: TamaguiOptions\n}> {\n  const filePath = join(cwd, 'tamagui.json')\n\n  if (!(await pathExists(filePath))) {\n    return {\n      exists: false,\n      options: await getDefaultTamaguiOptions({ cwd }),\n    }\n  }\n\n  try {\n    const options = (await readJSON(filePath)) as TamaguiOptions\n\n    if (!Array.isArray(options.components)) {\n      throw new Error(`Invalid components: not string[]`)\n    }\n\n    return {\n      exists: true,\n      options: {\n        ...(!options.config && (await getDefaultTamaguiOptions({ cwd }))),\n        ...options,\n      },\n    }\n  } catch (err: any) {\n    console.error(`Error reading tamagui.json: ${err.message} ${err.stack}`)\n\n    return {\n      exists: false,\n      options: await getDefaultTamaguiOptions({ cwd }),\n    }\n  }\n}\n"
  ],
  "version": 3
}